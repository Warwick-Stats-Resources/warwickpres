/*-- scss:defaults --*/

$font-family-sans-serif: Lato, Helvetica, sans-serif !default;
$font-family-monospace: "Fira Mono", monospace;
$headings-font-family: Lato, Helvetica, sans-serif !default;

//  Warwick colors 
// not using all of these, but keep for reference 
// in case we want to change elements of the theme later
$aubergine: #3C1053;
$aubergine85: #59346d;
$aubergine70: #775887; 
$aubergine50: #9e88a9;
$aubergine30: #c5b7cb;
$aubergine15: #e2dbe5;

$ruby_bright: #CB333B;
$blue_bright: #00A9CE;
$teal_bright: #6DCDB8;
$orange_bright: #E87722;
$gold_bright: #F1BE48;

$ruby_dark: #9D2235;
$blue_dark: #41748D;
$teal_dark: #507F70;
$orange_dark: #BE531C;
$gold_dark: #D69A2D;

$teal_light: #C4EBE4;  //teal 40%
$ruby_light: #EFC2C4;  // ruby 30%
$aubergine_light: $aubergine30;

$blue_mid: #0090AF; // 15% shade of $blue_bright

$gray: #58595B;
$gray_dark: #383838; // this is text colour used on main Warwick site
$black: #000000;
$gray20: #cccccc; // % of black
$gray10: #e6e6e6; // % of black
$gray05: #f2f2f2; // % of black
$white: #ffffff;

$primary:       $aubergine !default;

$presentation-font-size-root: 32px;
$code-block-font-size: .7em;
$presentation-heading-font: Lato, Helvetica, sans-serif !default;
$body-color: $gray_dark;
$link-color: $blue_mid;
$code-color: $ruby_bright;




// color classes
.primary {
  color: $primary;
}

// callouts 
$callout-color-note: $blue_bright; 
$callout-color-caution: $orange_bright; 
$callout-color-tip: $teal_bright; 
$callout-color-warning: $gold_bright; 
$callout-color-important: $ruby_bright; 

/*
Correct the alignment and spacing of the title in the callouts 
so they look like the Quarto defaults.
Other CSS changes override them otherwise. 
*/
.reveal .callout {
  .callout-title {
    display: flex;
    align-items: center;
    
    .callout-icon-container {
      margin-right: 0.1rem;  // Add space after the icon
    }

    p {
      margin: 0;
      padding: 0;
      align-self: center;
    }
  }
}

.inverse {
  color: $white;

  h1, h2, h3 {
    color: $teal_bright;
    
    code {
      color: $gold_bright;
    }
  }
  
  .slide-background-content {
    background-color: $aubergine;
  }
  
  a {
    color: $blue_bright;
  }
  
  p code {
    color: $gold_bright;
  }

  div.callout-note.callout-style-default .callout-title {
    background-color: $blue_dark !important;
  }

  div.callout-warning.callout-style-default .callout-title {
    background-color: $gold_dark !important;
  }

  div.callout-important.callout-style-default .callout-title {
    background-color: $ruby_dark !important;
  }

  div.callout-tip.callout-style-default .callout-title {
    background-color: $teal_dark !important;
  }

  div.callout-caution.callout-style-default .callout-title {
    background-color: $orange_dark !important;
  }

  // white icons so they show up against dark title
  .callout-icon::before {
    filter: brightness(0) invert(1);
  }

  /*
  try changing colour of callout content background, but issue with margin that would be fiddly to sort
  div.callout.callout-note.callout-titled.callout-style-default > div > div.callout-content {
    background-color: grey;
  }
  */

  // just changing title (against ligher background, if not specifying title background color
  /*
  div.callout-style-default .callout-title {
    color: $gray_dark;
  }
  */
}

// Create a map using color names
$colors: (
  'teal-light': $teal_light,
  'ruby-light': $ruby_light,
  'aubergine-light': $aubergine_light,
  'ruby-dark': $ruby-dark,
  'blue-dark': $blue_dark,
  'teal-dark': $teal_dark
);

// mixin for boxes with height parameter
@mixin box-style($height: 450px) {  // 450px is default value
  border-radius: 25px;
  margin-right: 10px;
  margin-bottom: 10px;
  padding: 20px;
  box-sizing: border-box;
  height: $height;
}

// Generate styles for each box
@each $name, $color in $colors {
  .col-box-#{$name} {
    @include box-style;  // uses default height
    background: $color;
  }
  
  // Create a tall variant
  .col-box-#{$name}-tall {
    @include box-style(550px);  
    background: $color;
  }

  // Create a short variant
  // two shorts with 10px gap stack to same height as tall 
  .col-box-#{$name}-short {
    @include box-style(270px);  
    background: $color;
  }
}